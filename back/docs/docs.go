// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/complete-purchase": {
            "post": {
                "description": "Enregistre la transaction et met à jour le nombre de jetons du parent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Compléter l'achat de jetons",
                "parameters": [
                    {
                        "description": "Données de la requête",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PaymentValidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction completed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/create-payment-intent": {
            "post": {
                "description": "Crée un PaymentIntent pour le paiement de jetons",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payments"
                ],
                "summary": "Créer un PaymentIntent",
                "parameters": [
                    {
                        "description": "Données de la requête",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PaymentIntentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client secret",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/kermesse/{kermesse_id}/stands": {
            "get": {
                "description": "Récupère tous les stands associés à une kermesse spécifique",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stands"
                ],
                "summary": "Récupérer tous les stands pour une kermesse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Kermesse ID",
                        "name": "kermesse_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des stands",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Stand"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid kermesse ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve stands",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/kermesse/{kermesse_id}/tombolas": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all tombolas for a specific kermesse",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tombola"
                ],
                "summary": "Get all tombolas for a kermesse",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Kermesse ID",
                        "name": "kermesse_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tombola"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid kermesse ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No authorization token provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not retrieve tombolas",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/kermesses": {
            "get": {
                "description": "Récupère toutes les kermesses.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kermesses"
                ],
                "summary": "Récupérer toutes les kermesses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Kermesse"
                            }
                        }
                    },
                    "500": {
                        "description": "Could not retrieve kermesses",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Crée une kermesse.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kermesses"
                ],
                "summary": "Créer une nouvelle kermesse",
                "parameters": [
                    {
                        "description": "Kermesse à créer",
                        "name": "kermesse",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Kermesse"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Kermesse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create kermesse",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/kermesses/{id}": {
            "get": {
                "description": "Récupère une kermesse par son ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kermesses"
                ],
                "summary": "Récupérer une kermesse par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Kermesse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Kermesse"
                        }
                    },
                    "400": {
                        "description": "Invalid kermesse ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Kermesse not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprime une kermesse par son ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Kermesses"
                ],
                "summary": "Supprimer une kermesse par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Kermesse ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Kermesse deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid kermesse ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not delete kermesse",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/parents": {
            "post": {
                "description": "Créer une nouvelle entrée parent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parents"
                ],
                "summary": "Créer un parent",
                "parameters": [
                    {
                        "description": "Parent data",
                        "name": "parent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Parent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Parent created",
                        "schema": {
                            "$ref": "#/definitions/models.Parent"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/parents/{id}": {
            "get": {
                "description": "Récupérer un parent par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parents"
                ],
                "summary": "Trouver un parent par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parent found",
                        "schema": {
                            "$ref": "#/definitions/models.Parent"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Parent not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Mettre à jour les informations d'un parent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parents"
                ],
                "summary": "Mettre à jour un parent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Parent data",
                        "name": "parent",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Parent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parent updated",
                        "schema": {
                            "$ref": "#/definitions/models.Parent"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Parent not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprimer un parent par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parents"
                ],
                "summary": "Supprimer un parent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parent deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Parent not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stands": {
            "post": {
                "description": "Crée un stand pour une kermesse",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stands"
                ],
                "summary": "Créer un nouveau stand",
                "parameters": [
                    {
                        "description": "Stand à créer",
                        "name": "stand",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Stand"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Stand créé",
                        "schema": {
                            "$ref": "#/definitions/models.Stand"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create stand",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stands/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Supprime un stand spécifique par son ID",
                "tags": [
                    "stands"
                ],
                "summary": "Supprimer un stand par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stand supprimé",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid stand ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Stand not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not delete stand",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stands/detail/{id}": {
            "get": {
                "description": "Récupère un stand spécifique par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "stands"
                ],
                "summary": "Récupérer un stand par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stand trouvé",
                        "schema": {
                            "$ref": "#/definitions/models.Stand"
                        }
                    },
                    "400": {
                        "description": "Invalid stand ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Stand not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/students": {
            "post": {
                "description": "Créer une nouvelle entrée étudiant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Créer un étudiant",
                "parameters": [
                    {
                        "description": "Student data",
                        "name": "student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Student created",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/students/parent/{parent_id}": {
            "get": {
                "description": "Récupérer tous les étudiants d'un parent donné",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Trouver les étudiants d'un parent par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent ID",
                        "name": "parent_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Students found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Student"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid parent ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/students/{id}": {
            "get": {
                "description": "Récupérer un étudiant par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Trouver un étudiant par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Student found",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Student not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Mettre à jour les informations d'un étudiant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Mettre à jour un étudiant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Student data",
                        "name": "student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Student updated",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Student not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprimer un étudiant par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Supprimer un étudiant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Student deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Student not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tickets": {
            "post": {
                "description": "Crée un billet de tombola pour un élève ou un parent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Créer un nouveau ticket",
                "parameters": [
                    {
                        "description": "Ticket à créer",
                        "name": "ticket",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ticket créé avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "400": {
                        "description": "Requête invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tickets/{id}": {
            "get": {
                "description": "Récupère un ticket spécifique par son ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Récupérer un ticket par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket trouvé",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "400": {
                        "description": "ID de ticket invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ticket non trouvé",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Supprime un ticket spécifique par son ID.",
                "tags": [
                    "Tickets"
                ],
                "summary": "Supprimer un ticket par ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket supprimé avec succès",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "ID de ticket invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Ticket non trouvé",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur lors de la suppression du ticket",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tombola": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new tombola",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tombola"
                ],
                "summary": "Create a new tombola",
                "parameters": [
                    {
                        "description": "Tombola object to create",
                        "name": "tombola",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tombola"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tombola created",
                        "schema": {
                            "$ref": "#/definitions/models.Tombola"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No authorization token provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not create tombola",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tombola/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific tombola by its ID",
                "tags": [
                    "tombola"
                ],
                "summary": "Delete a tombola by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tombola ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tombola deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid tombola ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No authorization token provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tombola not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Could not delete tombola",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tombola/detail/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a tombola by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tombola"
                ],
                "summary": "Get tombola by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tombola ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tombola"
                        }
                    },
                    "400": {
                        "description": "Invalid tombola ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: No authorization token provided",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Tombola not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tombola/{tombola_id}/tickets": {
            "get": {
                "description": "Récupère tous les tickets associés à une tombola spécifique.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tickets"
                ],
                "summary": "Récupérer tous les tickets pour une tombola",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tombola ID",
                        "name": "tombola_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des tickets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Ticket"
                            }
                        }
                    },
                    "400": {
                        "description": "ID de tombola invalide",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur lors de la récupération des tickets",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Récupère toutes les transactions associées à un parent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Obtenir toutes les transactions d'un parent",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent ID",
                        "name": "parent_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Crée une nouvelle transaction pour un parent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Créer une transaction",
                "parameters": [
                    {
                        "description": "Données de la requête",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/transactions/{id}": {
            "get": {
                "description": "Récupère une transaction par son ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Obtenir une transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Met à jour les informations d'une transaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Mettre à jour une transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Données de la requête",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Transaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprime une transaction par son ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Supprimer une transaction",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the user account of the currently authenticated user.",
                "tags": [
                    "users"
                ],
                "summary": "Delete the currently authenticated user",
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the currently authenticated user's details using their token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the current user",
                "responses": {
                    "200": {
                        "description": "The currently authenticated user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the profile information of the currently authenticated user, including password.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Email address of the user",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Profile picture file",
                        "name": "profile_picture",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Current password for verification",
                        "name": "old_password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password for the user",
                        "name": "new_password",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Array of skill IDs",
                        "name": "skills",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/models.PublicUser"
                        }
                    },
                    "400": {
                        "description": "Bad request if the provided data is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user's old password is incorrect or token is invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found if the user does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error for any server errors",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Registers a new user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last Name",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First Name",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "roles",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.PaymentIntentRequest": {
            "type": "object",
            "required": [
                "amount",
                "currency",
                "parent_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                }
            }
        },
        "controllers.PaymentValidRequest": {
            "type": "object",
            "properties": {
                "parent_id": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "tokens_amount": {
                    "type": "integer"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Kermesse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Parent": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "tokens_amount_available": {
                    "description": "Solde de jetons disponibles",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Référence vers la table User",
                    "type": "integer"
                }
            }
        },
        "models.PublicUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "models.Stand": {
            "type": "object",
            "required": [
                "kermesse_id",
                "name",
                "participation_cost",
                "stand_type",
                "stock"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kermesse_id": {
                    "description": "Référence vers la table Kermesse",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "participation_cost": {
                    "description": "Coût en jetons pour participer",
                    "type": "integer"
                },
                "stand_type": {
                    "description": "ENUM: 'nourriture', 'boisson', 'activité'",
                    "type": "string"
                },
                "stock": {
                    "description": "Stock pour les stands de nourriture ou boisson",
                    "type": "integer"
                },
                "teneur_id": {
                    "description": "Référence vers la table User (teneur de stand)",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Student": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "parent_id": {
                    "description": "Référence vers la table Parent (parent)",
                    "type": "integer"
                },
                "token_amount": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Référence vers la table User",
                    "type": "integer"
                }
            }
        },
        "models.Ticket": {
            "type": "object",
            "required": [
                "kermesse_id",
                "student_id",
                "ticket_number",
                "tombola_id"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kermesse_id": {
                    "description": "Référence vers la Kermesse",
                    "type": "integer"
                },
                "purchased_at": {
                    "description": "Date d'achat des tickets",
                    "type": "string"
                },
                "student_id": {
                    "description": "Référence vers un Student",
                    "type": "integer"
                },
                "ticket_number": {
                    "description": "Numéro unique du ticket",
                    "type": "string"
                },
                "tombola_id": {
                    "description": "Référence vers la Tombola",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Tombola": {
            "type": "object",
            "required": [
                "drawn_at",
                "kermesse_id",
                "prize_name"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "drawn_at": {
                    "description": "Date du tirage",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kermesse_id": {
                    "description": "Référence vers la Kermesse",
                    "type": "integer"
                },
                "prize_name": {
                    "description": "Nom du lot",
                    "type": "string"
                },
                "ticket_id": {
                    "description": "Référence vers Ticket gagnant",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "winner_id": {
                    "description": "Référence vers le gagnant (élève ou parent) User",
                    "type": "integer"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "required": [
                "parent_id",
                "price",
                "tokens_amount"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "parent_id": {
                    "description": "Référence vers un parent",
                    "type": "integer"
                },
                "price": {
                    "description": "Montant de la transaction (en monnaie réelle)",
                    "type": "integer"
                },
                "tokens_amount": {
                    "description": "Nombre de jetons achetés",
                    "type": "integer"
                },
                "transaction_date": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "$ref": "#/definitions/models.User"
                },
                "created_by_id": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@exmple.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "roles": {
                    "description": "1 = organizer, 2 = admin, 4 = student , 8 = parents, 16 = stand_leader",
                    "type": "integer",
                    "example": 0
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "example": "jdoe"
                }
            }
        },
        "models.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@exmple.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "models.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Bearer token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
